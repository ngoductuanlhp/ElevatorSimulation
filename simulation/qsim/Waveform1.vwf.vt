// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/20/2018 20:24:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Octal_4_mux_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Octal_4_mux_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] in0;
reg [7:0] in1;
reg [7:0] in2;
reg [7:0] in3;
reg [1:0] select;
// wires                                               
wire [7:0] out;

// assign statements (if any)                          
Octal_4_mux_1 i1 (
// port map - connection between master ports and signals/registers   
	.in0(in0),
	.in1(in1),
	.in2(in2),
	.in3(in3),
	.out(out),
	.select(select)
);
initial 
begin 
#1000000 $finish;
end 
// in0[ 7 ]
initial
begin
	in0[7] = 1'b0;
end 
// in0[ 6 ]
initial
begin
	in0[6] = 1'b0;
	in0[6] = #10000 1'b1;
	in0[6] = #310000 1'b0;
end 
// in0[ 5 ]
initial
begin
	in0[5] = 1'b0;
end 
// in0[ 4 ]
initial
begin
	in0[4] = 1'b0;
end 
// in0[ 3 ]
initial
begin
	in0[3] = 1'b0;
	in0[3] = #10000 1'b1;
	in0[3] = #310000 1'b0;
end 
// in0[ 2 ]
initial
begin
	in0[2] = 1'b0;
	in0[2] = #10000 1'b1;
	in0[2] = #310000 1'b0;
end 
// in0[ 1 ]
initial
begin
	in0[1] = 1'b0;
end 
// in0[ 0 ]
initial
begin
	in0[0] = 1'b0;
	in0[0] = #10000 1'b1;
	in0[0] = #310000 1'b0;
end 
// in1[ 7 ]
initial
begin
	in1[7] = 1'b0;
end 
// in1[ 6 ]
initial
begin
	in1[6] = 1'b0;
end 
// in1[ 5 ]
initial
begin
	in1[5] = 1'b0;
end 
// in1[ 4 ]
initial
begin
	in1[4] = 1'b0;
end 
// in1[ 3 ]
initial
begin
	in1[3] = 1'b1;
	in1[3] = #320000 1'b0;
end 
// in1[ 2 ]
initial
begin
	in1[2] = 1'b1;
	in1[2] = #320000 1'b0;
end 
// in1[ 1 ]
initial
begin
	in1[1] = 1'b1;
	in1[1] = #320000 1'b0;
end 
// in1[ 0 ]
initial
begin
	in1[0] = 1'b0;
end 
// in2[ 7 ]
initial
begin
	in2[7] = 1'b0;
end 
// in2[ 6 ]
initial
begin
	in2[6] = 1'b0;
end 
// in2[ 5 ]
initial
begin
	in2[5] = 1'b0;
end 
// in2[ 4 ]
initial
begin
	in2[4] = 1'b0;
end 
// in2[ 3 ]
initial
begin
	in2[3] = 1'b0;
end 
// in2[ 2 ]
initial
begin
	in2[2] = 1'b0;
end 
// in2[ 1 ]
initial
begin
	in2[1] = 1'b0;
end 
// in2[ 0 ]
initial
begin
	in2[0] = 1'b0;
end 
// in3[ 7 ]
initial
begin
	in3[7] = 1'b1;
	in3[7] = #320000 1'b0;
end 
// in3[ 6 ]
initial
begin
	in3[6] = 1'b1;
	in3[6] = #320000 1'b0;
end 
// in3[ 5 ]
initial
begin
	in3[5] = 1'b1;
	in3[5] = #320000 1'b0;
end 
// in3[ 4 ]
initial
begin
	in3[4] = 1'b1;
	in3[4] = #320000 1'b0;
end 
// in3[ 3 ]
initial
begin
	in3[3] = 1'b1;
	in3[3] = #320000 1'b0;
end 
// in3[ 2 ]
initial
begin
	in3[2] = 1'b1;
	in3[2] = #320000 1'b0;
end 
// in3[ 1 ]
initial
begin
	in3[1] = 1'b0;
end 
// in3[ 0 ]
initial
begin
	in3[0] = 1'b0;
end 
// select[ 1 ]
initial
begin
	select[1] = 1'b0;
	select[1] = #160000 1'b1;
	select[1] = #160000 1'b0;
end 
// select[ 0 ]
initial
begin
	repeat(2)
	begin
		select[0] = 1'b0;
		select[0] = #80000 1'b1;
		# 80000;
	end
	select[0] = 1'b0;
end 
endmodule

