// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/21/2018 14:37:43"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Register8bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Register8bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg LOAD;
reg RST;
reg [3:0] inA;
reg [3:0] inB;
// wires                                               
wire [3:0] outA;
wire [3:0] outB;

// assign statements (if any)                          
Register8bit i1 (
// port map - connection between master ports and signals/registers   
	.LOAD(LOAD),
	.RST(RST),
	.inA(inA),
	.inB(inB),
	.outA(outA),
	.outB(outB)
);
initial 
begin 
#1000000 $finish;
end 

// RST
initial
begin
	RST = 1'b0;
end 
// inA[ 3 ]
initial
begin
	inA[3] = 1'b0;
	inA[3] = #160000 1'b1;
	inA[3] = #80000 1'b0;
end 
// inA[ 2 ]
initial
begin
	inA[2] = 1'b0;
	inA[2] = #80000 1'b1;
	inA[2] = #80000 1'b0;
end 
// inA[ 1 ]
initial
begin
	inA[1] = 1'b1;
	inA[1] = #80000 1'b0;
end 
// inA[ 0 ]
initial
begin
	inA[0] = 1'b1;
	inA[0] = #80000 1'b0;
	inA[0] = #80000 1'b1;
	inA[0] = #80000 1'b0;
end 
// inB[ 3 ]
initial
begin
	inB[3] = 1'b0;
	inB[3] = #160000 1'b1;
	inB[3] = #80000 1'b0;
end 
// inB[ 2 ]
initial
begin
	inB[2] = 1'b0;
	inB[2] = #80000 1'b1;
	inB[2] = #80000 1'b0;
end 
// inB[ 1 ]
initial
begin
	inB[1] = 1'b1;
	inB[1] = #160000 1'b0;
end 
// inB[ 0 ]
initial
begin
	inB[0] = 1'b1;
	inB[0] = #240000 1'b0;
end 

// LOAD
initial
begin
	LOAD = 1'b1;
	LOAD = #70000 1'b0;
	LOAD = #20000 1'b1;
	LOAD = #60000 1'b0;
	LOAD = #20000 1'b1;
	LOAD = #60000 1'b0;
	LOAD = #20000 1'b1;
	LOAD = #70000 1'b0;
	LOAD = #20000 1'b1;
	LOAD = #570000 1'b0;
end 
endmodule

